#!/usr/bin/env node
// Generated by LiveScript 1.5.0
(function(){
  var yargs, fs, path, sqlite3, ref$, exec, mkdir, main;
  yargs = require('yargs');
  fs = require('fs');
  path = require('path');
  sqlite3 = require('better-sqlite3');
  ref$ = require('shelljs'), exec = ref$.exec, mkdir = ref$.mkdir;
  main = function(){
    var argv, db, rows, i$, len$, row, filename, title, artist, filepath, outfilename, outfilepath, disambiguation_suffix, results$ = [];
    argv = yargs.option('musicdb', {
      describe: 'the music.db file usually located at /data/data/com.google.android.music/databases/music.db',
      'default': '/data/data/com.google.android.music/databases/music.db'
    }).option('musicfiles', {
      describe: 'the music folder usually located at /data/data/com.google.android.music/files/music',
      'default': '/data/data/com.google.android.music/files/music'
    }).option('output', {
      describe: 'the music folder to write tagged mp3 files to',
      'default': 'music-export'
    }).strict().argv;
    if (!fs.existsSync(argv.musicdb)) {
      console.log('could not find music database at ' + argv.musicdb);
      return;
    }
    if (!fs.existsSync(argv.musicfiles)) {
      console.log('could not find music files at ' + argv.musicfiles);
      return;
    }
    db = new sqlite3(argv.musicdb);
    rows = db.prepare('SELECT * FROM MUSIC').all();
    if (!fs.existsSync(argv.output)) {
      mkdir('-p', argv.output);
    }
    for (i$ = 0, len$ = rows.length; i$ < len$; ++i$) {
      row = rows[i$];
      filename = row.LocalCopyPath;
      title = row.Title;
      artist = row.Artist;
      if (filename == null) {
        continue;
      }
      if (title == null) {
        title = 'Unknown';
      }
      if (artist == null) {
        artist = 'Unknown';
      }
      filepath = path.join(argv.musicfiles, filename);
      if (!fs.existsSync(filepath)) {
        console.log('skipping file which does not exist: ' + filepath);
        continue;
      }
      outfilename = artist + ' - ' + title + '.mp3';
      outfilepath = path.join(argv.output, outfilename);
      disambiguation_suffix = 1;
      while (fs.existsSync(outfilepath)) {
        outfilename = artist + ' - ' + title + '_' + disambiguation_suffix + '.mp3';
        outfilepath = path.join(argv.output, outfilename);
        disambiguation_suffix += 1;
      }
      results$.push(exec("ffmpeg -i '" + filepath + "' -acodec copy -vn -metadata title='" + title + "' -metadata artist='" + artist + "' '" + outfilepath + "'"));
    }
    return results$;
  };
  main();
}).call(this);
